name: "Heroku Review Apps Action"
description: Use Heroku Review Apps API to create review apps
author: A.Bernicchia
inputs:
  # heroku-app-name:
  #   description: "Your Heroku App name"
  #   required: true
  heroku-api-key:
    description: "Your Heroku API key"
    required: true
  files-glob:
    default: "*"
    description: "The glob pattern for files to include in the deployment"
    required: false
  heroku-pipeline-id:
    description: "The id of the Heroku pipeline to create Review Apps"
    required: true

branding:
  icon: "play-circle"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: Create Source Endpoint
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        echo 'Creating a source endpoint...'
        SOURCE_ENDPOINT=$(curl -X POST https://api.heroku.com/sources \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -r '{get: .source_blob.get_url, put: .source_blob.put_url}') && echo SOURCE_ENDPOINT=$SOURCE_ENDPOINT >> $GITHUB_ENV
        
    # it assumes that this action is preceeded by the checkout action to access the source code
    - name: Compress Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        tar -czvf source.tar.gz ${{ inputs.files-glob }}

    - name: Upload Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        export URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT) }} | jq -r '.put')
        curl $URL -X PUT -H 'Content-Type:' --data-binary @source.tar.gz

    - name: Create Review App
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'synchronize' || ((github.event.action == 'opened' || github.event.action == 'reopened'))) }}
      shell: bash
      run: |
        echo 'Create Review App'
        export SOURCE_GET_URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT) }} | jq -r '.get')
        export NEW_REVIEWAPP_OUTPUT=$(curl -X POST https://api.heroku.com/review-apps \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "'"${GITHUB_SHA::7}"'"},
        "pipeline":"'"${{ inputs.heroku-pipeline-id }}"'",
        "pr_number":${{ github.event.pull_request.number }},
        "branch":"'"${{ github.event.pull_request.head.ref }}"'"        
        }' \
        -H 'Accept: application/vnd.heroku+json; version=3' \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}")

    - name: Delete Review App
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        REVIEWAPP_ID_TOBEDELETED=$(curl https://api.heroku.com/pipelines/${{ inputs.heroku-pipeline-id }}/review-apps \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -r 'map(select((.pr_number == ${{ github.event.pull_request.number }}) and (.branch == "${{ github.event.pull_request.head.ref }}")) | .app.id) | .[]')

        echo "REVIEWAPP_ID_TOBEDELETED=$REVIEWAPP_ID_TOBEDELETED"
        echo "Deleting Review App ..."

        curl -X DELETE https://api.heroku.com/review-apps/$REVIEWAPP_ID_TOBEDELETED \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}"

