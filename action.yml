name: "Heroku Review Apps Action"
description: Use Heroku Review Apps API to create review apps
author: Andrea Bernicchia
inputs:
  heroku-api-key:
    description: "Your Heroku API key"
    required: true
  heroku-pipeline-id:
    description: "The id of the Heroku pipeline to create Review Apps"
    required: true

branding:
  icon: "play-circle"
  color: "purple"

runs:
  using: "composite"
  steps:
    - name: Create Source Endpoint
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        echo "Creating a source endpoint ..."
        SOURCE_ENDPOINT=$(curl -f -X POST https://api.heroku.com/sources \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -er '{get: .source_blob.get_url, put: .source_blob.put_url}')
        echo SOURCE_ENDPOINT=$SOURCE_ENDPOINT >> $GITHUB_ENV

    # it assumes that this action is preceeded by the checkout action to access the source code
    # files filtering must happen at checkout (see sparse-checkout from https://github.com/actions/checkout), 
    # here everything is included using find to avoid tar unwanted options injection in case the source repo has been compromised (with files name that mimic tar options e.g. "--checkpoint-action=exec=sh shell.sh")
    # tar output file is created under /tmp to avoid the "warning file changed as we read it" that forces exit code to 1
    - name: Compress Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        echo "Compressing Source Code ..."
        find . -name "*" -print0 | xargs -0 tar -czvf /tmp/source.tar.gz

    - name: Upload Source Code
      if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
      shell: bash
      run: |
        URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT) }} | jq -er '.put')
        curl -f $URL -X PUT -H 'Content-Type:' --data-binary @/tmp/source.tar.gz

    - name: Create Review App
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'synchronize' || github.event.action == 'opened' || github.event.action == 'reopened') }}
      shell: bash
      run: |
        echo "Create Review App"
        SOURCE_GET_URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT) }} | jq -er '.get')
        echo "SOURCE_GET_URL=$SOURCE_GET_URL"

        curl  -X POST https://api.heroku.com/review-apps \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "'"${GITHUB_SHA::7}"'"},
        "pipeline":"'"${{ inputs.heroku-pipeline-id }}"'",
        "pr_number":${{ github.event.pull_request.number }},
        "branch":"'"${{ github.event.pull_request.head.ref }}"'"        
        }' \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}"

    - name: Delete Review App
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        REVIEWAPP_ID_TOBEDELETED=$(curl -f "https://api.heroku.com/pipelines/${{ inputs.heroku-pipeline-id }}/review-apps" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -r 'map(select((.pr_number == ${{ github.event.pull_request.number }}) and (.branch == "${{ github.event.pull_request.head.ref }}")) | .id) | .[]')

        echo "Deleting Review App $REVIEWAPP_ID_TOBEDELETED ..."
        curl -f -X DELETE "https://api.heroku.com/review-apps/$REVIEWAPP_ID_TOBEDELETED" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}"