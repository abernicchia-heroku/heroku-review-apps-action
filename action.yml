name: "Heroku Flow Action"
description: Use Heroku to upload source code, build and either deploy apps or create review apps
author: Andrea Bernicchia
inputs:
  heroku-api-key:
    description: "Your Heroku API key"
    required: true
  remove-git-folder:
    description: "When true the .git/ folder is removed before creating the tar"
    required: false
    default: true
  heroku-app-name:
    description: "Your Heroku App name when code is pushed"
    required: true
  heroku-pipeline-id:
    description: "The Heroku pipeline ID to create Review Apps"
    required: true
  review-app-creation-check-timeout:
    description: "Review App creation check timeout. Polling for the Review App creation up to timeout (in seconds)"
    required: false
    default: 3600
  review-app-creation-check-sleep-time:
    description: "While polling for the Review App creation it sleeps for this amount of time (in seconds), min 5 seconds to avoid tight loop and API calls consumption"
    required: false
    default: 10

branding:
  icon: "play-circle"
  color: "purple"

runs:
  using: "composite"
  steps:
    # GitHub Actions does not enforce required inputs https://github.com/actions/runner/issues/1070
    - name: Validate common inputs
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      shell: bash
      run: |
        echo "Validating common inputs ..."
        [[ "${{ inputs.heroku-api-key }}" ]] || { echo "heroku-api-key is required"; exit 1; }
        [[ "${{ inputs.remove-git-folder }}" != "true" && "${{ inputs.remove-git-folder }}" != "false" ]] && { echo "invalid value for remove-git-folder input. Expected 'true' or 'false'"; exit 1; }
        echo "All inputs are valid"

    - name: Validate push inputs
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        echo "Validating push inputs ..."
        [[ "${{ inputs.heroku-app-name }}" ]] || { echo "heroku-app-name is required"; exit 1; }
        echo "All inputs are valid"

    # When a PR is closed only the heroku-pipeline-id is required, but both review-app-creation-check-timeout and review-app-creation-check-sleep-time have default values then it won't harm even if not used
    - name: Validate pull_request inputs
      if: ${{ github.event_name == 'pull_request' }}
      shell: bash
      run: |
        echo "Validating pull_request inputs ..."
        [[ "${{ inputs.heroku-pipeline-id }}" ]] || { echo "heroku-pipeline-id is required"; exit 1; }
        [[ "${{ inputs.review-app-creation-check-timeout }}" =~ ^[0-9]+$ ]] || { echo "review-app-creation-check-timeout must be a number"; exit 1; }
        [[ "${{ inputs.review-app-creation-check-sleep-time }}" =~ ^[0-9]+$ && "${{ inputs.review-app-creation-check-sleep-time }}" -ge 5 ]] || { echo "review-app-creation-check-sleep-time must be a number >= 5"; exit 1; }
        echo "All inputs are valid"

    # this action must be preceeded by the actions/checkout to retrieve the source code
    # files filtering must happen at checkout (see sparse-checkout from https://github.com/actions/checkout), 
    # here everything is included using find to avoid tar unwanted options injection in case the source repo has been compromised (with files name that mimic tar options e.g. "--checkpoint-action=exec=sh shell.sh")
    # tar output file is created under /tmp to avoid the "warning file changed as we read it" that forces exit code to 1
    # .git folder is removed before creating the tar if remove-git-folder is true - .git folder is the only dir that cannot be filtered by checkout
    - name: Compress Source Code
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') }}
      shell: bash
      run: |
        [[ "${{ inputs.remove-git-folder }}" == "true" ]] && { echo "Removing .git folder ..." ; rm -rf .git; }
        echo "Compressing Source Code ..."
        find . -name "*" -print0 | xargs -0 tar -czvf /tmp/source.tar.gz

    - name: Create Source Endpoint
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') }}
      shell: bash
      run: |
        echo "Creating a source endpoint ..."
        SOURCE_ENDPOINT_JSON=$(curl --fail-with-body -X POST https://api.heroku.com/sources \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -ec '{get: .source_blob.get_url, put: .source_blob.put_url}')

        echo "::add-mask::$SOURCE_ENDPOINT_JSON"
        echo "::add-mask::${{ toJSON(env.SOURCE_ENDPOINT_JSON) }}"
        echo SOURCE_ENDPOINT_JSON=$SOURCE_ENDPOINT_JSON >> $GITHUB_ENV

    - name: Upload Source Code
      if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') }}
      id: upload-source-code
      shell: bash
      run: |
        echo "Uploading Source Code ..."
        URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT_JSON) }} | jq -er '.put')
        curl --fail-with-body "$URL" -X PUT -H 'Content-Type:' --data-binary @/tmp/source.tar.gz
        echo "SOURCE_CODE_UPLOADED=true" >> $GITHUB_OUTPUT

    - name: Create App Build
      if: ${{ github.event_name == 'push' }}
      shell: bash
      run: |
        echo "Create App Build"

        SOURCE_GET_URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT_JSON) }} | jq -er '.get')
        NEW_BUILD_OUTPUT=$(curl --fail-with-body -X POST https://api.heroku.com/apps/${{ inputs.heroku-app-name }}/builds \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "'"${GITHUB_SHA::7}"'"}}' \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}")

        NEW_BUILD_ID=$(echo "$NEW_BUILD_OUTPUT" | jq -er '.id')
        OUTPUT_STREAM_URL=$(echo "$NEW_BUILD_OUTPUT" | jq -er '.output_stream_url')

        echo "Getting build output..."
        curl --silent -S --fail-with-body "$OUTPUT_STREAM_URL"
        NEW_BUILD_STATUS=$(curl --silent -S --fail-with-body "https://api.heroku.com/apps/${{ inputs.heroku-app-name }}/builds/$NEW_BUILD_ID" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -er '.status')

        echo "Build status: $NEW_BUILD_STATUS"
        if [ "$NEW_BUILD_STATUS" != "succeeded" ]; then exit 1; fi

    # Currently the only way to wait for Review App creation is polling its status ("pending" or "creating" or "created" or "deleting" or "deleted" or "errored")
    # Review App status check is retried up to 5 times with cURL to avoid aborting the polling phase due to transient errors
    - name: Create Review App
      if: ${{ github.event_name == 'pull_request' && (github.event.action == 'synchronize' || github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'labeled') }}
      shell: bash
      run: |
        echo "Create Review App"

        SOURCE_GET_URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT_JSON) }} | jq -er '.get')        
        REVIEW_APP_ID=$(curl --fail-with-body -X POST https://api.heroku.com/review-apps \
        -d '{"source_blob":{"url":"'"$SOURCE_GET_URL"'", "version": "'"${GITHUB_SHA::7}"'"},
        "pipeline":"'"${{ inputs.heroku-pipeline-id }}"'",
        "pr_number":${{ github.event.pull_request.number }},
        "branch":"'"${{ github.event.pull_request.head.ref }}"'"        
        }' \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -er '.id')

        echo "Waiting for Review App creation $REVIEW_APP_ID ..."
        max_time="${{ inputs.review-app-creation-check-timeout }}"
        start_time=$(date +%s)

        while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))    
            if [ "$elapsed_time" -ge "$max_time" ]; then
                echo "Max execution time reached, breaking polling ..."
                break   
            fi

            REVIEW_APP_STATUS=$(curl --retry 5 --fail-with-body "https://api.heroku.com/review-apps/$REVIEW_APP_ID" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
            jq -er '.status')

            [[ "$REVIEW_APP_STATUS" == "created" ]] && { echo "Review App created successfully" ; exit 0; } || \
            [[ "$REVIEW_APP_STATUS" == "errored" ]] && { echo "Review App creation completed with errors" ; exit 1; }

            echo "Review App creation still in progress, waiting ${{ inputs.review-app-creation-check-sleep-time }} seconds ..."
            sleep "${{ inputs.review-app-creation-check-sleep-time }}"
        done
    
    # If the source code has been uploaded, regardless of the previous steps status (success or failure), due to always(), the tarball is removed to reduce its exposure time
    # SOURCE_CODE_UPLOADED is set only for pull_request != 'closed' and push then no need to check for github.event_name
    - name: Tarball cleanup
      if: ${{ always() && steps.upload-source-code.outputs.SOURCE_CODE_UPLOADED == 'true' }}
      shell: bash
      run: |
        echo "Tarball cleanup"          
        URL=$(echo ${{ toJSON(env.SOURCE_ENDPOINT_JSON) }} | jq -er '.put')
        curl --fail-with-body "$URL" -X PUT -H 'Content-Type:' --data-binary ""

    - name: Delete Review App
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
      shell: bash
      run: |
        REVIEWAPP_ID_TOBEDELETED=$(curl --fail-with-body "https://api.heroku.com/pipelines/${{ inputs.heroku-pipeline-id }}/review-apps" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}" | \
        jq -er 'map(select((.pr_number == ${{ github.event.pull_request.number }}) and (.branch == "${{ github.event.pull_request.head.ref }}")) | .id) | .[]')

        echo "Deleting Review App $REVIEWAPP_ID_TOBEDELETED ..."
        curl --fail-with-body -X DELETE "https://api.heroku.com/review-apps/$REVIEWAPP_ID_TOBEDELETED" \
        -H "Content-Type: application/json" \
        -H "Accept: application/vnd.heroku+json; version=3" \
        -H "Authorization: Bearer ${{ inputs.heroku-api-key }}"